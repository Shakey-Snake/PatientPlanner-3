@page
@model IndexModel

@{
    ViewData["Title"] = "Timetable";
}

<script language="JavaScript" type="text/javascript" src="~/js/HidePage.js?n=4"></script>
<script language="JavaScript" type="text/javascript" src="~/js/CreateDevice.js?n=6"></script>
<script language="JavaScript" type="text/javascript" src="~/js/site.js?n=4"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>

@Html.AntiForgeryToken()

<input id="PushEndpoint" name="PushEndpoint" readonly required hidden />
<input class="PushP256DH" name="PushP256DH" readonly required hidden />
<input id="PushAuth" name="PushAuth" readonly required hidden />

<div class="reminders">
    <div id="no-support" class="critical-warning" style="display: none;">
        <p>It looks like your browser doesn't support notifications, please use a different browser to enable notifications</p>
    </div>

    <div id="notifications-denied" class="critical-warning" style="display: none;">
        <p id="notifications-denied-text" class="reminder-body">It looks like you have notifications blocked, please enable the notifications in page info next to the URL</p>
    </div>

    <div id="browser-notification-reminder" class="warning" style="display: none;">
        <label for="browser-notifications-enable" class="reminder-body">You have notifications disabled for the browser, please click here to enable notifications</label>
        <button id="browser-notifications-enable" class="btn btn-primary" onclick="enableBrowserNotifications()">Enable Notifications</button>
    </div>
    
    <div id="site-notifications-reminder" class="warning" style="display: none;">
        <label for="site-notifications-enable" class="reminder-body">You have notifications disabled, please enable them in the Shift and Task Settings on
            the Patients Page or click here to enable notifications</label>
        <button id="site-notifications-enable" class="btn btn-primary" onclick="enableSiteNotifications()">Enable Notifications</button>
    </div>

    <div id="session-warning" class="warning" style="display: none;">
        <label for="site-session-reminder" class="reminder-body">Your session is about to time-out, please click here to refresh the session</label>
        <button id="site-session-reminder" class="btn btn-primary" onclick="refreshPage()">Refresh</button>
    </div>

    <div id="session-timeout" class="critical-warning" style="display: none;">
        <label for="site-session-reminder" class="reminder-body">Your session has timed-out, please click here to refresh to save future changes</label>
        <button id="site-session-reminder" class="btn btn-primary" onclick="refreshPage()">Refresh</button>
    </div>
</div>

<div class="text-center">
    <h1 class="display-4">Timetable</h1>
</div>

@if (Model.times.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                @foreach (var item in Model.Patients)
                {
                    <th>
                        @Html.DisplayFor(modelItem => item.RoomNumber)
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @* Loop over the time period *@
            @foreach (var time in Model.times)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => time)
                    </td>
                    @* Loop over the patients *@
                    @foreach (var item in Model.Patients)
                    {
                        <td>
                            @* Gets the list of tasks for the patient for the specific time period *@
                            @{
                                var taskList = Model.taskList.Where(t => t.DueTime == time && t.PatientID == item.PatientID);
                            }

                            @foreach (var task in taskList)
                            {
                                <div>
                                    <div style='height: 15px; width: 15px; display: inline-block; margin-bottom: -1px; background-color: @(task.TaskColour)'>
                                    </div>
                                    <p style='display: inline-block; margin: 0px;'>@Html.DisplayFor(modelItem => task.TaskName)</p>
                                </div>
                            }
                        </td>
                    }
                </tr>
            }

        </tbody>
    </table>
}

<script>
    $(document).ready(function () {
        //start the timer for the session timeout
        initSessionMonitor();
    });
</script>

<script type="module">
    var applicationServerPublicKey = 'BKeF6SQHFZiUGYx2EO7VrkVYACUeYoWD3dkazCfXSS0cIfwRQqiCHXs5F-CilG7wY9JG2sjjFtTdWJmJ5-b2Pt8';
    var serviceWorker = '/sw.js';
    var isSubscribed = false;
    import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js'

    // If you enabled Analytics in your project, add the Firebase SDK for Google Analytics
    import { getMessaging } from 'https://www.gstatic.com/firebasejs/9.22.2/firebase-messaging.js'

    const firebaseConfig = {
        apiKey: "AIzaSyDWIxMplVoH-3GGQ7YQWU76DIUhikVCtjo",
        authDomain: "patientplanner-1d025.firebaseapp.com",
        projectId: "patientplanner-1d025",
        storageBucket: "patientplanner-1d025.appspot.com",
        messagingSenderId: "162531664373",
        appId: "1:162531664373:web:ddbe00353d9be2396c80bc"
    };

    // Initialize Firebase
    const app = initializeApp(firebaseConfig);

    // Initialize Firebase Cloud Messaging and get a reference to the service
    const messaging = getMessaging(app);

    window.onload = (event) =>{
    // Application Server Public Key defined in Views/Device/Create.cshtml
    if (typeof applicationServerPublicKey === 'undefined') {
        console.log('Vapid public key is undefined.');
        return;
    }

    if (Notification.permission == "default"){
        $('#browser-notification-reminder').show();
        console.log('[Notification.requestPermission] Browser denied permissions to notification api.');
    }
    else if (Notification.permission == "denied"){
        $('#browser-notification-reminder').show();
        console.log('[Notification.requestPermission] Browser denied permissions to notification api.');
    }
    else if (Notification.permission == "granted") {
        // Add the public key generated from the console here.
        getToken(messaging, {vapidKey: "BMjn0sGVG_L4BzjK9TdSlpXQGEv92Ccr6SQdsA-fDbNieO-hQb-hqdaVa6wvIdQOAcF2rWPNXeQDNOuNUhapx10" }).then((currentToken) => {
            if (currentToken) {
            // Send the token to your server and update the UI if necessary
            console.log('[Notification.requestPermission] Initializing service worker.');
            initialiseServiceWorker();
            subscribe();
            }
            else {
            // Show permission request UI
            console.log('No registration token available. Request permission to generate one.');
            }
        }).catch((err) => {
            console.log('An error occurred while retrieving token. ', err);
        });
    }
};
</script>