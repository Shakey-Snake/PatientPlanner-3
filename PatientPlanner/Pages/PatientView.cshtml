@page
@model PatientPlanner.Pages.PatientViewModel
@{
    ViewData["Title"] = "Timetable";
}

<script language="JavaScript" type="text/javascript" src="~/js/HidePage.js?n=4"></script>
<script language="JavaScript" type="text/javascript" src="~/js/CreateDevice.js?n=2"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>

@Html.AntiForgeryToken()

<input id="PushEndpoint" name="PushEndpoint" readonly required hidden />
<input class="PushP256DH" name="PushP256DH" readonly required hidden />
<input id="PushAuth" name="PushAuth" readonly required hidden />



<div class="text-center">
    <h1 class="display-4">Patients</h1>
</div>

<div class="settings-container">
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#panel-settings"
        aria-controls="panel-settings" aria-expanded="false" aria-label="Toggle navigation">
        Settings <svg fill="#000000" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg"
            xmlns:xlink="http://www.w3.org/1999/xlink" width="20px" height="20px" viewBox="0 0 45.973 45.973"
            xml:space="preserve">
            <g>
                <g>
                    <path d="M43.454,18.443h-2.437c-0.453-1.766-1.16-3.42-2.082-4.933l1.752-1.756c0.473-0.473,0.733-1.104,0.733-1.774
			c0-0.669-0.262-1.301-0.733-1.773l-2.92-2.917c-0.947-0.948-2.602-0.947-3.545-0.001l-1.826,1.815
			C30.9,6.232,29.296,5.56,27.529,5.128V2.52c0-1.383-1.105-2.52-2.488-2.52h-4.128c-1.383,0-2.471,1.137-2.471,2.52v2.607
			c-1.766,0.431-3.38,1.104-4.878,1.977l-1.825-1.815c-0.946-0.948-2.602-0.947-3.551-0.001L5.27,8.205
			C4.802,8.672,4.535,9.318,4.535,9.978c0,0.669,0.259,1.299,0.733,1.772l1.752,1.76c-0.921,1.513-1.629,3.167-2.081,4.933H2.501
			C1.117,18.443,0,19.555,0,20.935v4.125c0,1.384,1.117,2.471,2.501,2.471h2.438c0.452,1.766,1.159,3.43,2.079,4.943l-1.752,1.763
			c-0.474,0.473-0.734,1.106-0.734,1.776s0.261,1.303,0.734,1.776l2.92,2.919c0.474,0.473,1.103,0.733,1.772,0.733
			s1.299-0.261,1.773-0.733l1.833-1.816c1.498,0.873,3.112,1.545,4.878,1.978v2.604c0,1.383,1.088,2.498,2.471,2.498h4.128
			c1.383,0,2.488-1.115,2.488-2.498v-2.605c1.767-0.432,3.371-1.104,4.869-1.977l1.817,1.812c0.474,0.475,1.104,0.735,1.775,0.735
			c0.67,0,1.301-0.261,1.774-0.733l2.92-2.917c0.473-0.472,0.732-1.103,0.734-1.772c0-0.67-0.262-1.299-0.734-1.773l-1.75-1.77
			c0.92-1.514,1.627-3.179,2.08-4.943h2.438c1.383,0,2.52-1.087,2.52-2.471v-4.125C45.973,19.555,44.837,18.443,43.454,18.443z
			 M22.976,30.85c-4.378,0-7.928-3.517-7.928-7.852c0-4.338,3.55-7.85,7.928-7.85c4.379,0,7.931,3.512,7.931,7.85
			C30.906,27.334,27.355,30.85,22.976,30.85z" />
                </g>
            </g>
        </svg>
    </button>
    <div id="panel-settings" class="collapse w-100">
        <div class="card card-body">
            <div id="time-control">
                <h2>Time Control</h2>
                <table id="time-input">
                    <tr>
                        <td>
                            <label>Start Time</label>
                        </td>
                        <td>
                        </td>
                        <td>
                            <label>End Time</label>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <select id="start-time-input" asp-items="@Model.SettingsTimes">
                                <option value="">--Select a start time--</option>
                            </select>
                        </td>
                        <td>
                            <p>-</p>
                        </td>
                        <td>
                            <select id="end-time-input" asp-items="@Model.SettingsTimes">
                                <option value="">--Select an end time--</option>
                            </select>
                        </td>
                    </tr>
                </table>
                <button id="time-apply">Apply</button>
                <hr>
                <div id="interval">
                    <label>Interval Time</label>
                    <p>The interval minutes between each hour</p>
                    <select id="interval-input" asp-items="@Model.SettingsIntervalMinutes">
                        <option value="">--Select an interval--</option>
                    </select>
                </div>
                <br>
                <button id="interval-apply">Apply</button>
                <hr>
            </div>
            @* display all tasks *@
            <h2>Task Manager</h2>
            <p>Add, edit and delete tasks</p>
            <table>
                @foreach (var task in Model.baseTaskList)
                {
                    <tr id="@task.PatientTaskID">
                        <td class="task-text">
                            <p id="task-p">@task.TaskName</p>
                            <input id="task-input" type="text" value="@task.TaskName" style="display: none;">
                        </td>
                        <td class="task-colour">
                            <input type="color" value="@task.TaskColour" disabled>
                        </td>
                        <td>
                            <button class="edit-task-button">Edit</button>
                            <button class="save-task-button" style="display: none;">Save</button>
                            <button class="delete-task-button" style="display: none;">Delete</button>
                        </td>
                    </tr>
                }
                <tr>
                    <td id="task-text">
                        <input type="text">
                    </td>
                    <td id="task-colour">
                        <input type="color">
                    </td>
                    <td>
                        <button id="add-task-button">Add</button>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>

<div id="add-patient-form" style="display: none;">
    @* TODO: Add an x in the top right to exit menu *@
    <button id="add-patient-close"
        style="background-color: transparent; color: black; float: right; border: none;">x</button>
    <form method="post" asp-page-handler="AddTask">
        <div>
            <label for="task-name">Task Name</label>
            <select id="task-name" name="taskID" asp-items="@Model.Options">
                <option value="">--Select a task--</option>
            </select>
        </div>
        <input id="patient-id" name="patientID" value="@(Model.PatientID)" readonly required hidden />
        <input id="start-time" name="startTime" hidden />
        @* If start time is selected with no value in the end time
        set the end time values to be start time + interval to end time*@
        @* <div>
        <label for="start-time">Start Time</label>
        <select id="start-time" asp-items="@(new SelectList(Model.displayTimesList))">
        <option value="">--Select a start time--</option>
        </select>
        </div> *@
        @* If end time is selected with no value in the end time
        set the start time values to be start time to end time - interval*@
        <label for="multiple-task-check">Add Multiple Tasks</label>
        <input type="checkbox" id="multiple-task-check" name="multipleTaskCheck">
        <div class="multiple" style="display: none;">
            <label>End Time</label>
            <select id="end-time" name="endTime" asp-items="@(new SelectList(Model.displayTimesList))">
                <option value="">--Select an end time--</option>
            </select>
        </div>
        <div class="multiple" style="display: none;">
            <label>Interval</label>
            <select id="interval" name="interval" asp-items="@(new SelectList(Model.intervalList))">
                <option value="">--Select an end time--</option>
            </select>
        </div>
        <div>
            <input type="submit" value="Add" class="btn btn-primary" />
        </div>
    </form>
</div>

@if (Model.Patients.Count > 0)
{
    <div class="d-sm-inline-flex justify-content-between">
        <ul id="nav-patients" class="navbar-nav flex-row">
            @foreach (var patient in Model.Patients)
            {
                <li class="nav-item">
                    @* asp-page-handler defines the function that will handle the post.
            asp-route-curr defines the variables and their corresponding name that will be sent to the function *@
                    <form method="post" asp-page-handler="ChangeCurrentPatient" asp-route-curr="@patient.PatientID">
                        <button class="btn">@patient.RoomNumber</button>
                    </form>
                </li>
            }
            <li id="add-new-patient" class="nav-item">
                <p id="show-patient-add">+</p>
                <div style="display: none" id="text-add">
                    <input id="add-patient-text" type="text">
                    <button id="add-patient-button">Add</button>
                </div>

            </li>
        </ul>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>@Html.DisplayFor(modelItem => Model.CurrentPatient.RoomNumber)</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @* Loop over the time period *@
            @foreach (var time in Model.times)
            {
                @* Gets the list of tasks for the patient for the specific time period *@
                var newTaskList = Model.taskList.Where(t => t.DueTime == time);
                var rowspanCount = 1;
                if (newTaskList.Count() == 0)
                {
                    rowspanCount = 1;
                    <tr>
                        <td class="time-column">
                            @Html.DisplayFor(modelItem => time)
                        </td>
                        <td time='@(time.ToString(@"hh\:mm"))' class="add">
                            <svg style="color: blue" xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor"
                                class="bi bi-plus" viewBox="0 0 20 20">
                                <path
                                    d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"
                                    fill="blue">
                                </path>
                            </svg>
                        </td>
                        <td></td>
                        <td></td>
                    </tr>
                }
                else
                {
                    rowspanCount = newTaskList.Count();

                    @for (int i = 0; i < newTaskList.Count(); i++)
                    {
                        <tr>
                            @* Get the number of tasks in the current time period for the selected patient *@
                            @if (i == 0)
                            {
                                <td rowspan="@rowspanCount" class="time-column">
                                    @Html.DisplayFor(modelItem => time)
                                </td>
                                <td time='@(time.ToString(@"hh\:mm"))' class="add" rowspan="@rowspanCount">
                                    <svg style="color: blue" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                        class="bi bi-plus" viewBox="0 0 16 16">
                                        <path
                                            d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"
                                            fill="blue">
                                        </path>
                                    </svg>
                                </td>
                            }

                            <td>
                                <div
                                    style='height: 15px; width: 15px; display: inline-block; margin-bottom: -1px; background-color: @(newTaskList.ToList()[i].TaskColour)'>
                                </div>
                                <p style='display: inline-block; margin: 0px;'>@Html.DisplayFor(modelItem =>
                    newTaskList.ToList()[i].TaskName)</p>

                            </td>
                            @* TODO: Add id of task as an attribute relating to the task. *@
                            <td taskid="@newTaskList.ToList()[i].PatientDisplayTaskID" class="remove">
                                <svg style="color: red" width="30" height="25" viewBox="0 0 15 15" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M11 8H4V7H11V8Z" fill="red">
                                    </path>
                                </svg>
                            </td>
                        </tr>
                    }
                }

            }

        </tbody>
    </table>
}

<script>
    var startTimeIndex = 1;
    var boxtime = "";
    var addNew = false;

    const boxes = document.querySelectorAll('.add');

    boxes.forEach(box => {
        box.addEventListener('click', function handleClick(event) {
            var times = @Html.Raw(Json.Serialize(Model.displayTimesList));
            boxtime = $(this).attr('time');
            console.log($(this));
            console.log(times);
            startTimeIndex = times.indexOf(boxtime);
            console.log('box clicked', event);

            console.log(startTimeIndex);

            times.splice(0, startTimeIndex + 1)

            console.log(times);

            var $el = $("#end-time");
            $el.empty(); // remove old options
            $el.append($("<option></option>")
                .attr("value", "").text("--Select an end time--"));
            $.each(times, function (key, value) {
                $el.append($("<option></option>")
                    .attr("value", value).text(value));
            });

            var pos = $(this).offset();
            pos.left += 40;
            console.log(pos.left);

            const patientForm = document.getElementById("add-patient-form");
            var rect = box.getBoundingClientRect();
            console.log($(this).attr("time"));

    @* TODO: Reset the values to default *@
                $('#start-time').attr("value", $(this).attr("time"));
            $('#add-patient-form').show();
            $('#add-patient-form').offset(pos);
        });
    });

    const removeBoxes = document.querySelectorAll('.remove');
    console.log(removeBoxes);

    removeBoxes.forEach(box => {
        box.addEventListener('click', function handleClick(event) {
    @* Get the task id *@
                let _taskid = $(this).attr("taskid");
            console.log(_taskid);
    @* Display a warning *@
            if (confirm("Are you sure you want to remove this task?") == true) {
                $.ajax({
                    type: "POST",
                    url: "/PatientView?handler=DeleteTask",
                    data: {
                        taskid: _taskid
                    },
                    headers: {
                        RequestVerificationToken:
                            $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function (data) {
    @* update the table *@
                        if (data == "false") {
                            console.log("removed task");
                            console.log("reload");
                            location.reload();
                        }
                    },
                    error: function () {
                        alert('Error occured');
                    }
                });
            }
    @* if clicked remove the task and refresh the page *@
        });
    });

    const editTaskButton = document.querySelectorAll('.edit-task-button');
    console.log(editTaskButton);

    editTaskButton.forEach(box => {
        box.addEventListener('click', function handleClick(event) {
    @* enable everything to be edited *@
    @* get the parent *@
        const buttonCell = $(this).parent();
            console.log(buttonCell);

    @* show the other buttons and hide edit*@

                buttonCell.children(".save-task-button").show();
            buttonCell.children(".delete-task-button").show();
            $(this).hide();

    @* show the text and colour box *@
            const tableRow = buttonCell.parent();
            console.log(tableRow);
            const taskName = tableRow.children(".task-text");
            const taskColour = tableRow.children(".task-colour");
            taskName.children("#task-p").hide();
            taskName.children("#task-input").show();
            taskColour.children().prop("disabled", false);
        });
    });

    const saveTaskButton = document.querySelectorAll('.save-task-button');
    console.log(saveTaskButton);

    saveTaskButton.forEach(box => {
        box.addEventListener('click', function handleClick(event) {
    @* post everything to the server *@
    @* get the table row *@
        const buttonCell = $(this).parent();
            const tableRow = buttonCell.parent();
            console.log(tableRow);
    @* step down and get the input of everything *@
                let _taskName = tableRow.children(".task-text").children("#task-input").val();
            let _taskColour = tableRow.children(".task-colour").children().val();
            let _taskid = tableRow.attr("id");

            $.ajax({
                type: "POST",
                url: "/PatientView?handler=SaveBaseTask",
                data: {
                    taskid: _taskid,
                    taskColour: _taskColour,
                    taskName: _taskName
                },
                headers: {
                    RequestVerificationToken:
                        $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                success: function (data) {
    @* update the table *@
                        if (data == "false") {
                        console.log("changed task");
                        console.log("reload");
                        location.reload();
                    }
                },
                error: function () {
                    alert('Error occured');
                }
            });


    @* this wont matter as the location is reloading, but keep incase we dont refresh page later on *@

                buttonCell.children(".save-task-button").hide();
            buttonCell.children(".delete-task-button").hide();
            $(this).show();

    @* show the text and colour box *@
            const taskName = tableRow.children(".task-text");
            const taskColour = tableRow.children(".task-colour");
            taskName.children("#task-p").show();
            taskName.children("#task-input").hide();
            taskColour.children().prop("disabled", true);
        });
    });

    const deleteTaskButton = document.querySelectorAll('.delete-task-button');
    console.log(deleteTaskButton);

    deleteTaskButton.forEach(box => {
        box.addEventListener('click', function handleClick(event) {
    @* post everything to the server *@
    @* get the table row *@
        const buttonCell = $(this).parent();
            const tableRow = buttonCell.parent();
            console.log(tableRow);
    @* step down and get the input of everything *@
                let _taskid = tableRow.attr("id");

            $.ajax({
                type: "POST",
                url: "/PatientView?handler=DeleteBaseTask",
                data: {
                    taskid: _taskid
                },
                headers: {
                    RequestVerificationToken:
                        $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                success: function (data) {
    @* update the table *@
                        if (data == "false") {
                        console.log("deleted task");
                        console.log("reload");
                        location.reload();
                    }
                },
                error: function () {
                    alert('Error occured');
                }
            });


    @* this wont matter as the location is reloading, but keep incase we dont refresh page later on *@

                buttonCell.children(".save-task-button").hide();
            buttonCell.children(".delete-task-button").hide();
            $(this).show();

    @* show the text and colour box *@
            const taskName = tableRow.children(".task-text");
            const taskColour = tableRow.children(".task-colour");
            taskName.children("#task-p").show();
            taskName.children("#task-input").hide();
            taskColour.children().prop("disabled", true);
        });
    });

    $("#add-task-button").on('click', function handleClick(event) {
    @* post everything to the server *@
    @* get the table row *@
        const buttonCell = $(this).parent();
        const tableRow = buttonCell.parent();
        console.log(tableRow);
    @* step down and get the input of everything *@
            let _taskName = tableRow.children("#task-text").children().val();
        let _taskColour = tableRow.children("#task-colour").children().val();

        console.log(_taskName);

        $.ajax({
            type: "POST",
            url: "/PatientView?handler=AddBaseTask",
            data: {
                taskName: _taskName,
                taskColour: _taskColour
            },
            headers: {
                RequestVerificationToken:
                    $('input:hidden[name="__RequestVerificationToken"]').val()
            },
            success: function (data) {
    @* update the table *@
                        if (data == "false") {
                    console.log("deleted task");
                    console.log("reload");
                    location.reload();
                }
            },
            error: function () {
                alert('Error occured');
            }
        });


    @* this wont matter as the location is reloading, but keep incase we dont refresh page later on *@

            buttonCell.children(".save-task-button").hide();
        buttonCell.children(".delete-task-button").hide();
        $(this).show();

    @* show the text and colour box *@
            const taskName = tableRow.children(".task-text");
        const taskColour = tableRow.children(".task-colour");
        taskName.children("#task-p").show();
        taskName.children("#task-input").hide();
        taskColour.children().prop("disabled", true);
    });


    $('#multiple-task-check').change(function () {
        if (this.checked) {
            $('.multiple').show();
        }
        else {
    @* TODO: Reset the values of the select boxes for interval and end time to null *@
                $('.multiple').hide();
        }
        $('#textbox1').val(this.checked);
    });

    $('#add-patient-close').click(function () {
        console.log("hide");
        $('#add-patient-form').hide();
    });

    $('#add-new-patient').click(function () {
        console.log("Show new patient");
    @* get all children *@
        if (addNew == false) {
            $(this).children("#text-add").show();
            $('#show-patient-add').hide();
            addNew = true;
        }
    });

    $('#add-patient-button').click(function () {
    @* Get the roomNumber *@
        var _roomNumber = $('#add-patient-text').val();
        if (_roomNumber != null) {
    @* Call a ajax query to add a new patient *@
                $.ajax({
                    type: "POST",
                    url: "/PatientView?handler=AddPatient",
                    data: {
                        roomNumber: _roomNumber
                    },
                    headers: {
                        RequestVerificationToken:
                            $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function (data) {
    @* update the table *@
                        if (data == "false") {
                            console.log("Added patient");
                            console.log("reload");
                            location.reload();
                        }
                    },
                    error: function () {
                        alert('Error occured');
                    }
                });
            return;
        }
    });

    $('#time-apply').click(function () {
    @* Get the roomNumber *@
        var _startTime = $('#start-time-input').val();
        var _endTime = $('#end-time-input').val();
        if (_startTime != null && _endTime != null) {
    @* Call a ajax query to add a new patient *@
                $.ajax({
                    type: "POST",
                    url: "/PatientView?handler=SetTimes",
                    data: {
                        startTime: _startTime,
                        endTime: _endTime
                    },
                    headers: {
                        RequestVerificationToken:
                            $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function (data) {
    @* update the table *@
                        if (data == "false") {
                            console.log("start and end time set");
                            console.log("reload");
                            location.reload();
                        }
                    },
                    error: function () {
                        alert('Error occured');
                    }
                });
            return;
        }
    });


</script>